import { AnyAction } from "redux";
import { createAction,createAsyncThunk, createReducer } from '@reduxjs/toolkit';


interface UserEvent{
    id : number;
    title: string;
    dateStart: string;
    dateEnd:string;
}
interface UserEventsState{
    byIds: Record<UserEvent['id'],UserEvent>;
    allIds: UserEvent['id'][];
    loading: boolean;
    error?: string;
}

const initialState: UserEventsState = {
    byIds:{},
    allIds:[],
    loading:false,
    error:undefined,
}

export const getById = createAsyncThunk(
    'user/getId_request',
    async (id) => {
        const response = await fetch('http://localhost:3001/events');
        const events = await response.json();
        return { events };
    }
);

export const getByIdSync = createAction(
    'user/getIdSync_request',
    (id) => {
      return { payload: { id: id } };
    }
  );
const userEventsReducer = createReducer(initialState, {
    [getByIdSync.type]: (state:UserEventsState, action:AnyAction) => {
        // change state
        state.byIds = action.payload.events;
        state.loading = true;
    },
    [getById.pending.type]: (state:UserEventsState, action:AnyAction) => {
        state.loading = true;
    },
    [getById.fulfilled.type]: (state:UserEventsState, action:AnyAction) => {
        // change state
        state.loading = false;
        state.byIds = action.payload.events;
    },
    [getById.rejected.type]: (state:UserEventsState, action:AnyAction) => {
        state.loading = false;
        state.error = action.payload.error;        
    },
});
export default userEventsReducer;